public class javalanguagae{
    public static void main(String a[])
    {
        Object o1=new Object();
        Object o2=o1;
        System.out.println(o1.equals(o2));
    }
}
public class javalanguagae{
    public static void main(String a[])
    {
        Object o1=new Object();
        Object o2=o1;
        System.out.println(o1.hashCode());
    }
}




class MyObject{
        public String toString()
        {
            return "shiva";
        }
        public int hashCode()
        {
            return 100;
        }
        public boolean equals(Object o)
        {
            return this.hashCode()==o.hashCode();
        }
    }
    class javalanguagae{
    public static void main(String a[])
    {
        MyObject o1=new MyObject();
        MyObject o0=new MyObject();
        System.out.println(o1);
        System.out.println(o1.equals(o0));
    }
}







               INTEGER CLASS



public class WrapperDemo {

    public static void main(String[] args) {
        
        int m1=15;
        
        //Integer m2=m1;
        //Integer m3=15;
        
        Integer m2=Integer.valueOf("123");
        //Integer m3=Integer.valueOf("11111111", 2);
        Integer m3=Integer.valueOf("A7", 16);
        Integer m4=Integer.decode("0xA7");
        
        //System.out.println(m2.equals(m1));
        //System.out.println(m2.equals(m3));
        //System.out.println(m3);
        
        //System.out.println(Integer.parseInt("123"));
        //System.out.println(Integer.reverseBytes(128)==Integer.MIN_VALUE);
        System.out.println(Integer.toBinaryString(40));
        
    }
    
}





   FLOAT CLASSES;

package wrapperdemo1;

public class WrapperDemo1 {

    public static void main(String[] args) {
        
        float a=12.5f;
        //Float b=12.5f;
        //Float b=-12.5f/0;
        Float b=(float)Math.sqrt(9);
        
        //System.out.println(b.equals(a));
        //System.out.println(b.isInfinite());
        //System.out.println(Float.POSITIVE_INFINITY==b);
        //System.out.println(b==Float.NEGATIVE_INFINITY);
        //System.out.println(b.isNaN());
        System.out.println(b!=Float.NaN);
    }
    
}







class javalanguagae{
    public static void main(String a[])
    {
        int m1=15;
        Integer m2=Integer.valueOf("A7",16);
        Integer m4=Integer.bitCount(5);
        Integer m5=Integer.decode("0xf7");
        System.out.println(m4);
        System.out.println(m2);
        System.out.println(m5);

    }
}







import java.io.*;
class javalanguagae{
    public static void main(String a[]) throws Exception
    {
       FileInputStream fis=new FileInputStream("c:/users/koulu/Test.txt");
       BufferedInputStream bis=new BufferedInputStream(fis);
       System.out.println(fis.markSupported());
       System.out.println(bis.markSupported());
    }
}






















                                     PIPED STREAMS;


import java.io.*;

class Producer extends Thread
{
    OutputStream os;
    
    public Producer(OutputStream o)
    {
        os=o;
    }
    
    public void run()
    {
        int count=1;
        
        while(true)
        {
            try{
            os.write(count);
            os.flush();
            
            System.out.println("Producer "+count);
            System.out.flush();

            Thread.sleep(10);
            count++;
            }catch(Exception e){}
        }
    }
    
}

class Consumer extends Thread
{
    InputStream is;
    
    public Consumer(InputStream s)
    {
        is=s;
    }
    
    public void run()
    {
        int x;
        
        while(true)
        {
            try{
            
                x=is.read();
            
            System.out.println("Consumer "+x);
            System.out.flush();
            Thread.sleep(10);

            }catch(Exception e){}
        }
    }
    
}



public class javalanguagae
{
    public static void main(String[] args) throws Exception
    {
       PipedInputStream pis=new PipedInputStream();
       PipedOutputStream pos=new PipedOutputStream();
       
       pos.connect(pis);
       
       Producer p=new Producer(pos);
       Consumer c=new Consumer(pis);
       
       p.start();
       
       c.start();
       
    }  
}
